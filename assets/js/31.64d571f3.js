(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{255:function(a,s,t){"use strict";t.r(s);var n=t(4),e=Object(n.a)({},function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),t("p",[a._v("在"),t("strong",[a._v("散列")]),a._v("(hashing)中,元素储存在一个"),t("strong",[a._v("散列表")]),a._v("(hash table)内,它们在散列表的位置由"),t("strong",[a._v("散列函数")]),a._v("(hashing function)确定,\n每个位置可以称为"),t("strong",[a._v("桶")]),a._v("(bucket)或者"),t("strong",[a._v("单元")]),a._v("(cell).")]),a._v(" "),t("h2",{attrs:{id:"散列函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#散列函数","aria-hidden":"true"}},[a._v("#")]),a._v(" 散列函数")]),a._v(" "),t("p",[a._v("java.lang.Object中定义了public native int hashCode()方法,根据对象的内存地址返回了一个整数值,所有的java对象都可以被散列.\n从Object派生而来的类通常会重写hashcode方法,以提供自己的hashcode版本.")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("最为典型的就是java.lang.String的hashcode实现\n/**\n* Returns a hash code for this string. The hash code for a\n* {@code String} object is computed as\n* <blockquote><pre>\n* s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n* </pre></blockquote>\n* using {@code int} arithmetic, where {@code s[i]} is the\n* <i>i</i>th character of the string, {@code n} is the length of\n* the string, and {@code ^} indicates exponentiation.\n* (The hash value of the empty string is zero.)\n*\n* @return  a hash code value for this object.\n*/\npublic int hashCode() {\n   int h = hash;\n   if (h == 0 && value.length > 0) {\n       char val[] = value;\n\n       for (int i = 0; i < value.length; i++) {\n           h = 31 * h + val[i];\n       }\n       hash = h;\n   }\n   return h;\n} \n\n参考注释,hash计算公式可以计为s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1],  \nn为字符串长度,s[]即为String源码中其内部维护的char类型的数组val[],  \n推导如下:如果字符串长度 n = 3\ni = 0 -> h = 31 * 0 + val[0] = val[0];\ni = 1 -> h = 31 * (31 * 0 + val[0]) + val[1] =  31 * val[0] + val[1];\ni = 2 -> h = 31 * (31 * (31 * 0 + val[0]) + val[1]) + val[2] = 31^2 * val[0] +31 * val[1] + val[2];\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br"),t("span",{staticClass:"line-number"},[a._v("30")]),t("br"),t("span",{staticClass:"line-number"},[a._v("31")]),t("br"),t("span",{staticClass:"line-number"},[a._v("32")]),t("br"),t("span",{staticClass:"line-number"},[a._v("33")]),t("br"),t("span",{staticClass:"line-number"},[a._v("34")]),t("br")])]),t("p",[a._v("如有兴趣,请参考"),t("a",{attrs:{href:""}},[a._v("String hashCode()为何选用31作为乘子")])]),a._v(" "),t("h3",{attrs:{id:"直接寻址法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#直接寻址法","aria-hidden":"true"}},[a._v("#")]),a._v(" 直接寻址法")]),a._v(" "),t("p",[a._v("以数据元素关键字本身或它的线性函数作为它的hash地址,即H"),t("sub",[a._v("k")]),a._v(" = k 或者 H"),t("sub",[a._v("k")]),a._v(" = a*k+b(a,b为常数)"),t("br"),a._v("\n例1: 统计XX市年龄分布表,记录从1岁到110岁的人口数目,以年龄为关键字,hash函数取关键字本身.")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("地址")]),a._v(" "),t("th",[a._v("A"),t("sub",[a._v("1")])]),a._v(" "),t("th",[a._v("A"),t("sub",[a._v("2")])]),a._v(" "),t("th",[a._v("……")]),a._v(" "),t("th",[a._v("A"),t("sub",[a._v("100")])]),a._v(" "),t("th",[a._v("……")]),a._v(" "),t("th",[a._v("A"),t("sub",[a._v("109")])]),a._v(" "),t("th",[a._v("A"),t("sub",[a._v("110")])])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("年龄")]),a._v(" "),t("td",[a._v("1")]),a._v(" "),t("td",[a._v("2")]),a._v(" "),t("td",[a._v("……")]),a._v(" "),t("td",[a._v("100")]),a._v(" "),t("td",[a._v("……")]),a._v(" "),t("td",[a._v("109")]),a._v(" "),t("td",[a._v("110")])]),a._v(" "),t("tr",[t("td",[a._v("人数")]),a._v(" "),t("td",[a._v("200")]),a._v(" "),t("td",[a._v("500")]),a._v(" "),t("td",[a._v("……")]),a._v(" "),t("td",[a._v("30")]),a._v(" "),t("td",[a._v("……")]),a._v(" "),t("td",[a._v("1")]),a._v(" "),t("td",[a._v("0")])])])]),a._v(" "),t("p",[a._v("当要查询某一年龄对应的人数,直接查询对应的地址.如需查找100岁的人,读出100项的值.")]),a._v(" "),t("p",[a._v("实际应用当中，关键字很少连续,此方法生成的hash表可能造成空间的大量浪费"),t("br"),a._v("\n适用范围  "),t("strong",[a._v("地址集合大小==关键字集合大小")])]),a._v(" "),t("h3",{attrs:{id:"折叠法-folding-method"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#折叠法-folding-method","aria-hidden":"true"}},[a._v("#")]),a._v(" 折叠法(folding method)")]),a._v(" "),t("p",[a._v("关键字被分割成多个部分,然后再组合或叠加到一起以创建散列表的索引."),t("br"),a._v("\n实现方式: 将关键字按照所需的索引长度切分(最后一部分的位数可以不同),然后取这几部分的叠加和(舍去进位).\n平移折叠法: 将分割后的每一部分的最低位对齐相加\n边界折叠法: 从一端向另一端沿分割界来回折叠,然后对齐相加")]),a._v(" "),t("p",[a._v("适用范围  "),t("strong",[a._v("关键字位数较多,而且关键字中每一位上数字分布大致均匀")])]),a._v(" "),t("h3",{attrs:{id:"余数法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#余数法","aria-hidden":"true"}},[a._v("#")]),a._v(" 余数法")]),a._v(" "),t("h3",{attrs:{id:"平方取中法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#平方取中法","aria-hidden":"true"}},[a._v("#")]),a._v(" 平方取中法")]),a._v(" "),t("h3",{attrs:{id:"基数转换法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基数转换法","aria-hidden":"true"}},[a._v("#")]),a._v(" 基数转换法")]),a._v(" "),t("h3",{attrs:{id:"数字分析法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数字分析法","aria-hidden":"true"}},[a._v("#")]),a._v(" 数字分析法")]),a._v(" "),t("h3",{attrs:{id:"长度相关法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#长度相关法","aria-hidden":"true"}},[a._v("#")]),a._v(" 长度相关法")]),a._v(" "),t("h2",{attrs:{id:"完美散列函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#完美散列函数","aria-hidden":"true"}},[a._v("#")]),a._v(" 完美散列函数")]),a._v(" "),t("h2",{attrs:{id:"散列冲突"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#散列冲突","aria-hidden":"true"}},[a._v("#")]),a._v(" 散列冲突")]),a._v(" "),t("p",[a._v("两个元素或者关键字映射到散列表相同的位置的情况称为散列冲突")]),a._v(" "),t("h3",{attrs:{id:"开放地址法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开放地址法","aria-hidden":"true"}},[a._v("#")]),a._v(" 开放地址法")]),a._v(" "),t("h3",{attrs:{id:"链地址法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链地址法","aria-hidden":"true"}},[a._v("#")]),a._v(" 链地址法")])])},[],!1,null,null,null);s.default=e.exports}}]);