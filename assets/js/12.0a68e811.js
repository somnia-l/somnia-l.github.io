(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{264:function(t,v,_){"use strict";_.r(v);var n=_(4),a=Object(n.a)({},function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h3",{attrs:{id:"简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简介","aria-hidden":"true"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),_("p",[t._v("对于算法进行分析评估,通常是从时间与空间两种因数进行讨论的."),_("br"),t._v("\n时间复杂度: 算法执行语句的次数."),_("br"),t._v("\n空间复杂度: 算法在运行过程中临时占用储存大小的计算量度.")]),t._v(" "),_("h3",{attrs:{id:"大o表示法-big-oh"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#大o表示法-big-oh","aria-hidden":"true"}},[t._v("#")]),t._v(" 大O表示法(big-oh)")]),t._v(" "),_("p",[t._v("算法的时间复杂度通常用大O表示,一般用于界定函数集合的上界,可以称作渐进上界记号.")]),t._v(" "),_("blockquote",[_("blockquote",[_("blockquote",[_("p",[t._v("数学定义:  设T(n)和g(n)是定义域为自然数集N上的函数.若存在正常量c和n"),_("sub",[t._v("0")]),t._v(",使得对一切n≥n"),_("sub",[t._v("0")]),t._v("都有0≤T(n)≤cg(n)成立,\n则称T(n)的渐进上界是g(n).表达式T[n]=O(g(n)),称为渐进时间复杂度.一般情况下,T[n]为算法基本操作重复执行的次数,g(n)是算法中频度最大的语句频率.")])])])]),t._v(" "),_("p",[t._v("常见的时间复杂度(以算法平均情况归类):")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("序号")]),t._v(" "),_("th",[t._v("名称")]),t._v(" "),_("th",[t._v("例子")]),t._v(" "),_("th",[t._v("说明")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("1")]),t._v(" "),_("td",[t._v("常数阶O(1)")]),t._v(" "),_("td",[_("a",{attrs:{href:""}},[t._v("哈希算法")])]),t._v(" "),_("td",[t._v("hash/普通的加减乘除等语句")])]),t._v(" "),_("tr",[_("td",[t._v("2")]),t._v(" "),_("td",[t._v("对数阶O(log"),_("sub",[t._v("c")]),t._v("n)")]),t._v(" "),_("td",[_("a",{attrs:{href:""}},[t._v("二分查找")]),t._v(" / "),_("a",{attrs:{href:""}},[t._v("斐波那契数列")])]),t._v(" "),_("td",[t._v("二分策略,底数c一般是2")])]),t._v(" "),_("tr",[_("td",[t._v("3")]),t._v(" "),_("td",[t._v("线性阶O(n)")]),t._v(" "),_("td",[_("a",{attrs:{href:""}},[t._v("线性查找")])]),t._v(" "),_("td",[t._v("循环")])]),t._v(" "),_("tr",[_("td",[t._v("4")]),t._v(" "),_("td",[t._v("线性对数阶O(nlog"),_("sub",[t._v("c")]),t._v("n)")]),t._v(" "),_("td",[_("a",{attrs:{href:""}},[t._v("归并排序")]),t._v(" / "),_("a",{attrs:{href:""}},[t._v("快速排序")]),t._v(" / "),_("a",{attrs:{href:""}},[t._v("希尔排序")]),t._v(" / "),_("a",{attrs:{href:""}},[t._v("堆排序")])]),t._v(" "),_("td",[t._v("分治，底数c一般是2")])]),t._v(" "),_("tr",[_("td",[t._v("5")]),t._v(" "),_("td",[t._v("平方阶O(n"),_("sup",[t._v("2")]),t._v(")")]),t._v(" "),_("td",[_("a",{attrs:{href:""}},[t._v("简单插入排序")]),t._v(" / "),_("a",{attrs:{href:""}},[t._v("简单选择排序")]),t._v(" / "),_("a",{attrs:{href:""}},[t._v("冒泡排序")])]),t._v(" "),_("td",[t._v("双层循环,检查所有元素对")])]),t._v(" "),_("tr",[_("td",[t._v("6")]),t._v(" "),_("td",[t._v("立方阶O(n"),_("sup",[t._v("3")]),t._v(")")]),t._v(" "),_("td",[_("a",{attrs:{href:""}},[t._v("全源最短路径 - floyd算法")])]),t._v(" "),_("td",[t._v("三层循环,检查所有的三元组")])]),t._v(" "),_("tr",[_("td",[t._v("7")]),t._v(" "),_("td",[t._v("k次方阶O(n"),_("sup",[t._v("k")]),t._v(")")]),t._v(" "),_("td",[_("a",{attrs:{href:""}},[t._v("DFS深度优先")])]),t._v(" "),_("td",[t._v("发现从源节点可达的所有节点为止")])]),t._v(" "),_("tr",[_("td",[t._v("8")]),t._v(" "),_("td",[t._v("指数阶O(2"),_("sup",[t._v("n")]),t._v(")")]),t._v(" "),_("td",[_("a",{attrs:{href:""}},[t._v("穷举查找")])]),t._v(" "),_("td",[t._v("检查所有子集")])]),t._v(" "),_("tr",[_("td",[t._v("9")]),t._v(" "),_("td",[t._v("阶乘O(n!)")]),t._v(" "),_("td",[_("a",{attrs:{href:""}},[t._v("旅行商问题")])]),t._v(" "),_("td")])])]),t._v(" "),_("p",[t._v("其中O(log"),_("sub",[t._v("c")]),t._v("n)、Ο(n)、O(nlog"),_("sub",[t._v("c")]),t._v("n)、O(n"),_("sup",[t._v("2")]),t._v(")、O(n"),_("sup",[t._v("3")]),t._v(")和O(n"),_("sup",[t._v("k")]),t._v(")称为多项式时间,而O(2"),_("sup",[t._v("n")]),t._v(")和Ο(n!)称为指数时间."),_("br"),t._v("\n计算机科学家普遍认为前者(即多项式时间复杂度的算法)是有效算法,把这类问题称为P(Polynomial,多项式)类问题,而把后者(即指数时间复杂度的算法)称为NP(Non-Deterministic Polynomial,非确定多项式)问题.")]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("//求出1+2+3+4+……+100的和?\n//示例1:\nint sum = 0;      //执行1次\nint n=100;        //执行1次\nfor (int i =1; i<=n; i++){  //执行n+1次\n    sum+=i;      //执行n次\n}\n//g(n)=1+1+n+1+n=2n+3≈n(当n趋于∞时),故T(n)=O(n);\n\n//示例2:\nint sum =0;   //执行一次\nint n = 100;  //执行一次\nsum = (1+n)*n/2;  //执行一次\n//g(n)=3 与n无关的常数阶,故T(n)=O(1)\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br"),_("span",{staticClass:"line-number"},[t._v("6")]),_("br"),_("span",{staticClass:"line-number"},[t._v("7")]),_("br"),_("span",{staticClass:"line-number"},[t._v("8")]),_("br"),_("span",{staticClass:"line-number"},[t._v("9")]),_("br"),_("span",{staticClass:"line-number"},[t._v("10")]),_("br"),_("span",{staticClass:"line-number"},[t._v("11")]),_("br"),_("span",{staticClass:"line-number"},[t._v("12")]),_("br"),_("span",{staticClass:"line-number"},[t._v("13")]),_("br"),_("span",{staticClass:"line-number"},[t._v("14")]),_("br")])]),_("h3",{attrs:{id:"大ω表示法-omega"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#大ω表示法-omega","aria-hidden":"true"}},[t._v("#")]),t._v(" 大Ω表示法(omega)")]),t._v(" "),_("p",[t._v("Ω也是一种时间复杂度的渐进表示法,一般用于界定函数集合的下界,可以称作渐进下界记号.")]),t._v(" "),_("blockquote",[_("blockquote",[_("blockquote",[_("p",[t._v("数学定义: 设T(n)和g(n)是定义域为自然数集N上的函数.若存在正常量c和n"),_("sub",[t._v("0")]),t._v(",使得对一切n≥n"),_("sub",[t._v("0")]),t._v("都有0≤cg(n)≤T(n)成立,\n则称T(n)的渐进下界是g(n).表达式T[n]=Ω(g(n)).")])])])]),t._v(" "),_("h3",{attrs:{id:"大θ表示法-theta"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#大θ表示法-theta","aria-hidden":"true"}},[t._v("#")]),t._v(" 大Θ表示法(theta)")]),t._v(" "),_("p",[t._v("Θ用于界定函数的渐进上界和渐进下界,可以称作渐进紧确界记号.")]),t._v(" "),_("blockquote",[_("blockquote",[_("blockquote",[_("p",[t._v("数学定义: 设T(n)和g(n)是定义域为自然数集N上的函数.若存在正常量c"),_("sub",[t._v("1")]),t._v("、c"),_("sub",[t._v("2")]),t._v("和n"),_("sub",[t._v("0")]),t._v(",使得对一切n≥n"),_("sub",[t._v("0")]),t._v("都有0≤c"),_("sub",[t._v("1")]),t._v("g(n)≤cT(n)≤c"),_("sub",[t._v("2")]),t._v("g(n)成立,\n则称T(n)的渐进紧确界是g(n).表达式T[n]=Θ(g(n)).")])])])]),t._v(" "),_("h3",{attrs:{id:"小o表示法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#小o表示法","aria-hidden":"true"}},[t._v("#")]),t._v(" 小o表示法")]),t._v(" "),_("p",[t._v("由大O记号提供的渐进上界可能是渐进紧确的,也可能是非紧确的,用小o表示一个非渐进紧确的上界")]),t._v(" "),_("blockquote",[_("blockquote",[_("blockquote",[_("p",[t._v("数学定义: 设T(n)和g(n)是定义域为自然数集N上的函数.对任意正常量c>0,存在常量n"),_("sub",[t._v("0")]),t._v(">0,使得对一切n≥n"),_("sub",[t._v("0")]),t._v("都有0≤T(n)<cg(n)成立,\n则称T(n)的非渐进紧确上界是g(n).表达式T[n]=o(g(n))")])])])]),t._v(" "),_("h3",{attrs:{id:"小w表示法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#小w表示法","aria-hidden":"true"}},[t._v("#")]),t._v(" 小w表示法")]),t._v(" "),_("p",[t._v("由大Ω记号提供的渐进下界可能是渐进紧确的,也可能是非紧确的,用小w表示一个非渐进紧确的下界")]),t._v(" "),_("blockquote",[_("blockquote",[_("blockquote",[_("p",[t._v("数学定义: 设T(n)和g(n)是定义域为自然数集N上的函数.对任意正常量c>0,存在常量n"),_("sub",[t._v("0")]),t._v(">0,使得对一切n≥n"),_("sub",[t._v("0")]),t._v("都有0≤cg(n)<T(n)成立,\n则称T(n)的非渐进紧确下界是g(n).表达式T[n]=w(g(n))")])])])])])},[],!1,null,null,null);v.default=a.exports}}]);